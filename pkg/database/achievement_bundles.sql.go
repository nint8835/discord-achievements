// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: achievement_bundles.sql

package database

import (
	"context"
)

const createAchievementBundle = `-- name: CreateAchievementBundle :one
INSERT INTO achievement_bundles (
  name, description, image_url, owner_id
) VALUES (
  ?, ?, ?, ?
 ) RETURNING id, name, description, image_url, owner_id, created_at, updated_at
`

type CreateAchievementBundleParams struct {
	Name        string     `json:"name"`
	Description NullString `json:"description"`
	ImageUrl    NullString `json:"image_url"`
	OwnerID     string     `json:"owner_id"`
}

func (q *Queries) CreateAchievementBundle(ctx context.Context, arg CreateAchievementBundleParams) (AchievementBundle, error) {
	row := q.db.QueryRowContext(ctx, createAchievementBundle,
		arg.Name,
		arg.Description,
		arg.ImageUrl,
		arg.OwnerID,
	)
	var i AchievementBundle
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ImageUrl,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAchievementBundlesOwnedByUser = `-- name: GetAchievementBundlesOwnedByUser :many
SELECT id, name, description, image_url, owner_id, created_at, updated_at FROM achievement_bundles WHERE owner_id = ?
`

func (q *Queries) GetAchievementBundlesOwnedByUser(ctx context.Context, ownerID string) ([]AchievementBundle, error) {
	rows, err := q.db.QueryContext(ctx, getAchievementBundlesOwnedByUser, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AchievementBundle
	for rows.Next() {
		var i AchievementBundle
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ImageUrl,
			&i.OwnerID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAchievementBundles = `-- name: GetAllAchievementBundles :many
SELECT id, name, description, image_url, owner_id, created_at, updated_at FROM achievement_bundles
`

func (q *Queries) GetAllAchievementBundles(ctx context.Context) ([]AchievementBundle, error) {
	rows, err := q.db.QueryContext(ctx, getAllAchievementBundles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AchievementBundle
	for rows.Next() {
		var i AchievementBundle
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ImageUrl,
			&i.OwnerID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
