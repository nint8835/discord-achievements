// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: users.sql

package database

import (
	"context"
)

const createOrUpdateUser = `-- name: CreateOrUpdateUser :one
INSERT OR REPLACE INTO users (
   id, username, avatar_url
) VALUES (
    ?, ?, ?
 ) RETURNING id, username, avatar_url
`

type CreateOrUpdateUserParams struct {
	ID        string `json:"id"`
	Username  string `json:"username"`
	AvatarUrl string `json:"avatar_url"`
}

func (q *Queries) CreateOrUpdateUser(ctx context.Context, arg CreateOrUpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createOrUpdateUser, arg.ID, arg.Username, arg.AvatarUrl)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.AvatarUrl)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
   id, username, avatar_url
) VALUES (
    ?, ?, ?
 ) RETURNING id, username, avatar_url
`

type CreateUserParams struct {
	ID        string `json:"id"`
	Username  string `json:"username"`
	AvatarUrl string `json:"avatar_url"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.ID, arg.Username, arg.AvatarUrl)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.AvatarUrl)
	return i, err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, username, avatar_url FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Username, &i.AvatarUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, username, avatar_url FROM users WHERE id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.AvatarUrl)
	return i, err
}
